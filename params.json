{"name":"assimilate","tagline":"Extends objects.","body":"# Synopsis\r\n\r\n**assimilate** adds the biological and technological distinctiveness of other objects to its own perfection.\r\n\r\nIn other words, it extends an object with the properties of other objects. In place.\r\n\r\n[![browser support](https://ci.testling.com/pluma/assimilate.png)](https://ci.testling.com/pluma/assimilate)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/assimilate.png?branch=master)](https://travis-ci.org/pluma/assimilate)\r\n\r\n# Another one?\r\n\r\nI admit the idea is hardly novel, but it's amazingly hard to find a library that does just this one thing but works both on npm and with component, has no silly dependencies and follows good practices (like semantic versioning). This may be a case of NIH, but apparently there are many ways to get this simple thing wrong.\r\n\r\n# Seriously?\r\n\r\nYes.\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install assimilate\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/assimilate.git\r\ncd assimilate\r\nnpm install\r\nmake && make dist\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/assimilate\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With bower\r\n\r\n```sh\r\nbower install assimilate\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/assimilate/master/dist/assimilate.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/assimilate/master/dist/assimilate.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As a standalone library\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/pluma/assimilate/master/dist/assimilate.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/assimilate.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `assimilate` module available in the global namespace.\r\n\r\n# Basic usage example\r\n\r\n```javascript\r\nvar assimilate = require('assimilate');\r\nvar src = {a: 1};\r\nassimilate(src, {b: 2}, {c: 3});\r\nconsole.log(src);\r\n// {a: 1, b: 2, c: 3}\r\n```\r\n\r\n# Deep copying example\r\n\r\n```javascript\r\nvar assimilate = require('assimilate');\r\nvar src = {a: {b: {c: {d: 1}}}};\r\nassimilate(src, {a: {b: {c: {e: 2}}}});\r\nconsole.log(src);\r\n// {a: {b: {c: {d: 1, e: 2}}}}\r\n```\r\n\r\n# API\r\n\r\n## assimilate([deep], target, sourcesâ€¦):Object\r\n\r\nExtends the target object by applying all properties of each source object in succession, then returns the modified target object.\r\n\r\nIf `deep` is a boolean and set to `true`, existing properties will be extended recursively rather than replaced.\r\n\r\nIf `target` is null or undefined, a new object will be used instead. If any of the sources are null or undefined, they will be skipped.\r\n\r\n# License\r\n\r\nThe MIT/Expat license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}