{"name":"assimilate","tagline":"extends objects","body":"# Synopsis\r\n\r\n**assimilate** adds the biological and technological distinctiveness of other objects to its own perfection.\r\n\r\nIn other words, it extends an object with the properties of other objects. In place.\r\n\r\n[![browser support](https://ci.testling.com/pluma/assimilate.png)](https://ci.testling.com/pluma/assimilate)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/assimilate.png?branch=master)](https://travis-ci.org/pluma/assimilate) [![NPM version](https://badge.fury.io/js/assimilate.png)](http://badge.fury.io/js/assimilate) [![Dependencies](https://david-dm.org/pluma/assimilate.png)](https://david-dm.org/pluma/assimilate)\r\n\r\n# Another one?\r\n\r\nI admit the idea is hardly novel, but it's amazingly hard to find a library that does just this one thing but works both on npm and with component, has no silly dependencies and follows good practices (like semantic versioning). This may be a case of NIH, but apparently there are many ways to get this simple thing wrong.\r\n\r\nAlso, as of version 0.3.0, assimilate comes with a strategy for copying property descriptors, which is useful if you're not stuck in IE8 and want to use modern language features. If you *are* stuck in IE8, all the other strategies should work just fine.\r\n\r\n# Seriously?\r\n\r\nYes.\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install assimilate\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/assimilate.git\r\ncd assimilate\r\nnpm install\r\nmake dist && make\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/assimilate\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With bower\r\n\r\n```sh\r\nbower install assimilate\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/assimilate/master/dist/assimilate.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/assimilate/master/dist/assimilate.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As a standalone library\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/pluma/assimilate/master/dist/assimilate.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/assimilate.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `assimilate` module available in the global namespace.\r\n\r\n# Basic usage example\r\n\r\n```javascript\r\nvar assimilate = require('assimilate');\r\nvar obj = {a: 1};\r\nassimilate(obj, {b: 2}, {c: 3});\r\nconsole.log(obj);\r\n// {a: 1, b: 2, c: 3}\r\n```\r\n\r\n# Deep copying example\r\n\r\n```javascript\r\nvar deepAssimilate = require('assimilate').withStrategy('deep');\r\nvar obj = {a: {b: {c: {d: 1}}}};\r\ndeepAssimilate(obj, {a: {b: {c: {e: 2}}}});\r\nconsole.log(obj);\r\n// {a: {b: {c: {d: 1, e: 2}}}}\r\n```\r\n\r\n# Property descriptor example\r\n\r\n```javascript\r\nvar properAssimilate = require('assimilate').withStrategy('proper');\r\nvar obj = {b: 1};\r\nproperAssimilate(obj, {get a() {return 2;}});\r\nconsole.log(obj);\r\n// {b: 1, a: [Getter]}\r\n```\r\n\r\n# API\r\n\r\n## assimilate(target, sourcesâ€¦):Object\r\n\r\nExtends the target object by applying all properties of each source object in succession, then returns the modified target object.\r\n\r\nIf `target` is null or undefined, a new object will be used instead. If any of the sources are null or undefined, they will be skipped.\r\n\r\nThis function is the equivalent of `assimilate.withStrategy('default')`.\r\n\r\n## assimilate.withStrategy(strategy):Function\r\n\r\nReturns a variant of `assimilate` that uses the given strategy for copying/merging properties.\r\n\r\nIf `strategy` is set to a string, it must be a case-insensitive match against a strategy in `assimilate.strategies` (see below). Otherwise it must be an object with a method `keysFn` that accepts an object and returns an array of property names, and a method `copyFn` that accepts a `target`, `key` and `source` value and performs a copy or merge on the `target` object.\r\n\r\n## assimilate.strategies\r\n\r\nContains the built-in copy/merge strategies. These will be performed on the `target`, `source` and `key` for each property `key` in each `source` object.\r\n\r\n### DEFAULT\r\n\r\nCopies the values of all properties of the source to the target, except for inherited properties.\r\n\r\n### PROPER\r\n\r\nDefines all of the source's own properties on the target object using the source's property descriptors.\r\n\r\nThis can be used to copy the source's getters and setters rather than their current values.\r\n\r\n### INHERITED\r\n\r\nCopies the values of all properties of the source to the target, including inherited properties.\r\n\r\n### DEEP\r\n\r\nCopies the values of all properties of the source to the target, except for inherited properties. If the property already exists and both values are objects, the object's properties will be merged recursively.\r\n\r\n### STRICT\r\n\r\nCopies the values of all properties of the source to the target, except for inherited properties. If the source property's value is `undefined`, it will be skipped.\r\n\r\n### FALLBACK\r\n\r\nCopies the values of all properties of the source that do not already exist or are set to `undefined` on the target, except inherited properties.\r\n\r\nThis can be useful for merging a configuration object with its defaults.\r\n\r\n# Unlicense\r\n\r\nThis is free and unencumbered public domain software. For more information, see http://unlicense.org/ or the accompanying [UNLICENSE](https://github.com/pluma/assimilate/blob/master/UNLICENSE) file.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}